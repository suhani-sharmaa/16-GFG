KMP ALGO Palindromic string

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;


// } Driver Code Ends
// User function Template for Java

class Solution {
    public static int[] computeLPS(String s)
    {
        int n=s.length();
        int lps[]=new int[n];
        lps[0]=0;
        int len=0;
        int i=1;
        while(i<n)
        {
            if(s.charAt(i)==s.charAt(len))
            { len++;
                lps[i]=len;
                i++;
                
            }
            else{
                if(len!=0)
                {
                    len=lps[len-1];
                }
                else{ lps[i]=0;
                i++;
                }
            }
            
       }
    return lps;}
    public static int minChar(String s) {
        // Write your code here
        int n=s.length();
        String rev=new StringBuilder(s).reverse().toString();
        s=s+'$'+rev;
        int lps[]=computeLPS(s);
        return (n-lps[lps.length-1]);
    }
}

//{ Driver Code Starts.

class GFG {
    public static void main(String[] args) throws IOException {
        var sc = new FastReader();
        int test = sc.nextInt();
        while (test-- > 0) {
            String s = sc.nextString();
            System.out.println(Solution.minChar(s));

            System.out.println("~");
        }
    }

    public static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
            st = new StringTokenizer("");
        }

        private void read() throws IOException {
            st = new StringTokenizer(br.readLine());
        }

        public String nextString() throws IOException {
            while (!st.hasMoreTokens()) read();
            return st.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(nextString());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(nextString());
        }
    }
}
// } Driver Code Ends
