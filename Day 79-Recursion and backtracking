Word Search


//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int tc = sc.nextInt(); // Number of test cases
        while (tc-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            char[][] mat = new char[n][m];

            // Reading the matrix
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    mat[i][j] = sc.next().charAt(0);
                }
            }

            String word = sc.next();
            Solution obj = new Solution();
            boolean ans = obj.isWordExist(mat, word);
            if (ans)
                System.out.println("true");
            else
                System.out.println("false");

            System.out.println("~");
        }
        sc.close();
    }
}
// } Driver Code Ends


class Solution {
    static int delRow[]={-1,0,1,0};
    static int delCol[]={0,1,0,-1};
    public static boolean dfs(char mat[][],int i,int j,int idx,String word,boolean visited[][])
    {
        if(idx==word.length())
        {
            return true;
        }
        visited[i][j]=true;
        for(int k=0;k<4;k++)
        {
            int newRow=i+delRow[k];
            int newCol=j+delCol[k];
            if(newRow>=0 && newCol>=0 && newRow<mat.length && newCol<mat[0].length && !visited[newRow][newCol] && mat[newRow][newCol]==word.charAt(idx))
            {
                if(dfs(mat,newRow,newCol,idx+1,word,visited))
                {
                    return true;
                }
            }
        }
        visited[i][j]=false;
    return false;}
    static public boolean isWordExist(char[][] mat, String word) {
        // Code here
        int n=mat.length;
        int m=mat[0].length;
       
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]==word.charAt(0))
                {
                     boolean visited[][]=new boolean[n][m];
                    if(dfs(mat,i,j,1,word,visited))
                    {
                        return true;
                    }
                }
            }
        }
    return false;}
}
