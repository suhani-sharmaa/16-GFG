KMP Algorithm

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            String s, patt;
            s = sc.next();
            patt = sc.next();

            Solution ob = new Solution();

            ArrayList<Integer> res = ob.search(patt, s);
            if (res.size() == 0)
                System.out.print("[]");
            else {
                for (int i = 0; i < res.size(); i++) System.out.print(res.get(i) + " ");
            }
            System.out.println();
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        // your code here
        int pi[]=new int[pat.length()];
        int len=0;
        int i=1;
        while(i<pat.length())
        {
            if(pat.charAt(i)==pat.charAt(len))
            {
                len++;
                pi[i]=len;
                i++;
            }
            else{
                if(len!=0)
                {
                   len=pi[len-1];
                }
                else {
                    pi[i]=0;
                    i++;
                }
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
 i = 1;  // start from the 1st character of text (1-based indexing)
int j = 0;  // pattern index

while (i <= txt.length()) {
    if (txt.charAt(i - 1) == pat.charAt(j)) {  // comparing with 0-based indexing of pat
        i++;
        j++;
    }

    if (j == pat.length()) {  // if pattern is found
        ans.add(i - j-1);  // store the starting index of the match
        j = pi[j - 1];  // use the LPS (Longest Prefix Suffix) array to continue searching
    } else if (i <= txt.length() && txt.charAt(i - 1) != pat.charAt(j)) {
        if (j != 0) {
            j = pi[j - 1];  // use the LPS array to skip characters in the pattern
        } else {
            i++;  // move to the next character in the text
        }
    }
}

return ans;}
}
