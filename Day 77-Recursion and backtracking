nqueens problem

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while (t-- > 0) {
            int n = Integer.parseInt(in.readLine());

            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);
            if (ans.size() == 0)
                System.out.println("-1");
            else {
                ans.sort((list1, list2) -> {
                    int size = Math.min(list1.size(), list2.size());
                    for (int i = 0; i < size; i++) {
                        if (!list1.get(i).equals(list2.get(i))) {
                            return list1.get(i) - list2.get(i);
                        }
                    }
                    return list1.size() - list2.size();
                });

                for (int i = 0; i < ans.size(); i++) {
                    System.out.print("[");
                    for (int j = 0; j < ans.get(i).size(); j++)
                        System.out.print(ans.get(i).get(j) + " ");
                    System.out.print("] ");
                }
                System.out.println();
            }

            System.out.println("~");
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    private ArrayList<ArrayList<Integer>> res=new ArrayList<>();
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        char board[][]=new char[n][n];
        for(int i=0;i<n;i++)
        {
            Arrays.fill(board[i],'x');
        }
        helper(board,0,n);
        return res;
        // code here
    }
    private void helper(char board[][],int row,int n)
    {
        if(row==n)
        {
            res.add(printBoard(board));
            return;
        }
        for(int col=0;col<n;col++)
        {
            if(isSafe(board,row,col,n))
            {
                board[row][col]='Q';
                helper(board,row+1,n);
                board[row][col]='x';
            }
        }
    }
    private boolean isSafe(char board[][],int row,int col,int n)
    {
        for(int i=0;i<row;i++)
        {
            if(board[i][col]=='Q')
            {
                return false;
            }
        }
        for(int i=row,j=col;i>=0 && j>=0;i--,j--)
        {
            if(board[i][j]=='Q')
            {
                return false;
            }
        }
        for(int i=row,j=col;i>=0 &&j<n;i--,j++)
        {
            if(board[i][j]=='Q')
            {
                return false;
            }
        }
        return true;
    }
    private ArrayList<Integer> printBoard(char board[][])
    {
        ArrayList<Integer> res=new ArrayList<>();
        for(char chars[]:board)
        {
            for(int j=0;j<board.length;j++)
            {
                if(chars[j]=='Q')
                {
                    res.add(j+1);
                }
            }
        }
        return res;
    }
}
