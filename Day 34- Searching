Allocate minimum pages

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());

        while (tc-- > 0) {

            String[] str = br.readLine().trim().split(" ");
            int[] a = new int[str.length];
            for (int i = 0; i < str.length; i++) {
                a[i] = Integer.parseInt(str[i]);
            }
            String[] nk = br.readLine().trim().split(" ");
            int k = Integer.parseInt(nk[0]);
            Solution sln = new Solution();
            int ans = sln.findPages(a, k);

            System.out.println(ans);
            System.out.println("~");
        }
    }
}
// } Driver Code Ends



//Back-end complete function Template for Java

class Solution {
    public static boolean isValid(int arr[],int n,int m,int maxAllowed)
    {
        int students=1,pages=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>maxAllowed)
            {
                return false;
            }
            if(pages+arr[i]<=maxAllowed)
            {
                pages+=arr[i];
            }
            else {
                students++;
                pages=arr[i];
            }
        }
   if(students<=m)
   {
       return true;
   }
        else return false;
    }
   
    public static int sum(int arr[])
    {
        int sum=0;
        for(int i=0;i<arr.length;i++)
        {
            
            sum+=arr[i];
        }
        return sum;
    }
    public static int findPages(int[] arr, int k) {
        if(k>arr.length)
        {
            return -1;
        }
        // code here
        int min=0;
        int max=sum(arr);
        int start=min,end=max;
        int ans=-1;
        while(start<=end)
        {
            int mid=(start)+(end-start)/2;
            if(isValid(arr,arr.length,k,mid))
            {
                end=mid-1;
                ans=mid;
            }
            else
           start=mid+1;
        }
        
        return ans;
    }
}
